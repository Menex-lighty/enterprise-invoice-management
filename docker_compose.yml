version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:16-alpine
    container_name: invoice_db
    environment:
      POSTGRES_DB: ${DB_NAME:-invoice_system}
      POSTGRES_USER: ${DB_USER:-default}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-default}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - invoice_network
    restart: unless-stopped

  # Flask Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: invoice_backend
    environment:
      - FLASK_ENV=${FLASK_ENV:-development}
      - DATABASE_URL=postgresql://${DB_USER:-default}:${DB_PASSWORD:-default}@db:5432/${DB_NAME:-invoice_system}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-secret-key-change-in-production}
      - FLASK_APP=app.py
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app
      - invoice_files:/app/generated_files
    depends_on:
      - db
    networks:
      - invoice_network
    restart: unless-stopped
    command: ["python", "app.py"]

  # Flutter Web Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: invoice_frontend
    ports:
      - "8080:8080"
    volumes:
      - ./frontend:/app
    depends_on:
      - backend
    networks:
      - invoice_network
    restart: unless-stopped
    environment:
      - API_BASE_URL=http://backend:5000

  # Nginx Reverse Proxy (for production)
  nginx:
    image: nginx:alpine
    container_name: invoice_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - invoice_network
    restart: unless-stopped
    profiles:
      - production

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: invoice_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - invoice_network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  invoice_files:
    driver: local

networks:
  invoice_network:
    driver: bridge